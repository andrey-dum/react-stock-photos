{"version":3,"sources":["Photo.js","App.js","reportWebVitals.js","index.js"],"names":["Photo","regular","urls","alt_description","likes","user","name","portfolio_url","medium","profile_image","className","src","alt","href","clientID","App","useState","loading","setLoading","photos","setPhotos","page","setPage","query","setQuery","fetchImages","a","urlPage","urlQuery","url","fetch","response","json","data","oldPhotos","results","console","log","useEffect","event","window","addEventListener","innerHeight","scrollY","document","body","scrollHeight","oldPage","removeEventListener","type","placeholder","value","onChange","e","target","onClick","preventDefault","map","image","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"mQA4BeA,EA1BD,SAAC,GASR,IARGC,EAQJ,EARJC,KAAQD,QACRE,EAOI,EAPJA,gBACAC,EAMI,EANJA,MAMI,IALJC,KACEC,EAIE,EAJFA,KACAC,EAGE,EAHFA,cACiBC,EAEf,EAFFC,cAAiBD,OAGnB,OACE,0BAASE,UAAU,QAAnB,UACE,qBAAKC,IAAKV,EAASW,IAAKT,IACxB,sBAAKO,UAAU,aAAf,UACE,gCACE,6BAAKJ,IACL,8BAAIF,EAAJ,eAEF,mBAAGS,KAAMN,EAAT,SACE,qBAAKI,IAAKH,EAAQI,IAAI,GAAGF,UAAU,sBChBvCI,EAAQ,yDA2FCC,MAvFf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGWJ,mBAAS,GAHpB,mBAGNK,EAHM,KAGAC,EAHA,OAIaN,mBAAS,IAJtB,mBAINO,EAJM,KAICC,EAJD,KAMPC,EAAW,uCAAG,oCAAAC,EAAA,6DAClBR,GAAW,GAELS,EAHY,gBAGON,GACnBO,EAJY,iBAISL,GAEzBM,EADEN,EACC,UAdM,2CAcN,OAAkBT,GAAlB,OAA6Ba,GAA7B,OAAuCC,GAEvC,UAjBI,oCAiBJ,OAAgBd,GAAhB,OAA2Ba,GARd,kBAWOG,MAAMD,GAXb,cAWVE,EAXU,iBAYGA,EAASC,OAZZ,QAYVC,EAZU,OAahBb,GAAU,SAACc,GACT,OAAIX,GAAkB,IAATF,EACJY,EAAKE,QAEN,GAAN,mBAAWD,GADFX,EACT,YAAyBU,EAAKE,SAE9B,YAAyBF,OAG7Bf,GAAW,GAtBK,kDAwBhBkB,QAAQC,IAAR,MACAnB,GAAW,GAzBK,0DAAH,qDAoDjB,OAvBAoB,qBAAU,WACRb,MAEC,CAACJ,IAEJiB,qBAAU,WACR,IAAMC,EAAQC,OAAOC,iBAAiB,UAAU,aAE1CxB,GAAWuB,OAAOE,YAAcF,OAAOG,UACzCC,SAASC,KAAKC,aAAe,GAE7BxB,GAAQ,SAACyB,GACP,OAAOA,EAAU,QAIvB,OAAO,kBAAMP,OAAOQ,oBAAoB,SAAUT,MAEjD,IAMD,iCACE,0BAAS7B,UAAU,SAAnB,UACE,oBAAIA,UAAU,eAAd,0BACA,uBAAMA,UAAU,cAAhB,UACE,uBACEuC,KAAK,OACLC,YAAY,SACZC,MAAO5B,EACP6B,SAAU,SAACC,GAAD,OAAO7B,EAAS6B,EAAEC,OAAOH,QACnCzC,UAAU,eAEZ,wBAAQuC,KAAK,SAASvC,UAAU,aAAa6C,QAhBhC,SAACF,GACpBA,EAAEG,iBACFlC,EAAQ,IAcF,SACE,cAAC,IAAD,YAIN,0BAASZ,UAAU,SAAnB,UACE,qBAAKA,UAAU,gBAAf,SACGS,EAAOsC,KAAI,SAACC,EAAOC,GAClB,OAAO,cAAC,EAAD,eAAuBD,GAAXC,QAGtB1C,GAAW,oBAAIP,UAAU,UAAd,+BC9ELkD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SAM1BZ,M","file":"static/js/main.ccd18241.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Photo = ({\r\n  urls: { regular },\r\n  alt_description,\r\n  likes,\r\n  user: {\r\n    name,\r\n    portfolio_url,\r\n    profile_image: { medium },\r\n  },\r\n}) => {\r\n  return (\r\n    <article className='photo'>\r\n      <img src={regular} alt={alt_description} />\r\n      <div className='photo-info'>\r\n        <div>\r\n          <h4>{name}</h4>\r\n          <p>{likes} likes</p>\r\n        </div>\r\n        <a href={portfolio_url}>\r\n          <img src={medium} alt='' className='user-img' />\r\n        </a>\r\n      </div>\r\n    </article>\r\n  )\r\n}\r\n\r\nexport default Photo","import React, { useState, useEffect } from 'react'\nimport { FaSearch } from 'react-icons/fa'\n\nimport Photo from './Photo'\n\nconst clientID = `?client_id=s-FEnOSzBdSjMxr0_sQ-B7O8BJHb-AERZGqZtuAKCog`\nconst mainUrl = `https://api.unsplash.com/photos/`\nconst searchUrl = `https://api.unsplash.com/search/photos/`\n\nfunction App() {\n  const [loading, setLoading] = useState(false)\n  const [photos, setPhotos] = useState([])\n  const [page, setPage] = useState(0)\n  const [query, setQuery] = useState('')\n\n  const fetchImages = async () => {\n    setLoading(true)\n    let url\n    const urlPage = `&page=${page}`\n    const urlQuery = `&query=${query}`\n    if (query) {\n      url = `${searchUrl}${clientID}${urlPage}${urlQuery}`\n    } else {\n      url = `${mainUrl}${clientID}${urlPage}`\n    }\n    try {\n      const response = await fetch(url)\n      const data = await response.json()\n      setPhotos((oldPhotos) => {\n        if (query && page === 1) {\n          return data.results\n        } else if (query) {\n          return [...oldPhotos, ...data.results]\n        } else {\n          return [...oldPhotos, ...data]\n        }\n      })\n      setLoading(false)\n    } catch (error) {\n      console.log(error)\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchImages()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page])\n\n  useEffect(() => {\n    const event = window.addEventListener('scroll', () => {\n      if (\n        (!loading && window.innerHeight + window.scrollY) >=\n        document.body.scrollHeight - 2\n      ) {\n        setPage((oldPage) => {\n          return oldPage + 1\n        })\n      }\n    })\n    return () => window.removeEventListener('scroll', event)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    setPage(1)\n  }\n  return (\n    <main>\n      <section className='search'>\n        <h1 className=\"search-title\">Stock Photos</h1>\n        <form className='search-form'>\n          <input\n            type='text'\n            placeholder='search'\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            className='form-input'\n          />\n          <button type='submit' className='submit-btn' onClick={handleSubmit}>\n            <FaSearch />\n          </button>\n        </form>\n      </section>\n      <section className='photos'>\n        <div className='photos-center'>\n          {photos.map((image, index) => {\n            return <Photo key={index} {...image} />\n          })}\n        </div>\n        {loading && <h2 className='loading'>Loading...</h2>}\n      </section>\n    </main>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}